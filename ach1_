.include "m8def.inc"

.def temp = r17

.equ TIMER1_INTERVAL = 500
.equ TIMER2_INTERVAL = 1000

TIMER1_STR:  .DB "ping", 0x0D, 0x0A
TIMER2_STR:  .DB "pong", 0x0D, 0x0A

.org 0x0000
        rjmp RESET

.org TIM1_COMPA_vect
        rjmp TIMER1_ISR

.org TIM2_COMPA_vect
        rjmp TIMER2_ISR

RESET:
        ldi temp, low(RAMEND)
        out SPL, temp
        ldi temp, high(RAMEND)
        out SPH, temp

        ldi temp, (1 << WGM12) | (1 << CS11) | (1 << CS10) ; Установка режима CTC и делителя на 64 для таймера 1
        out TCCR1B, temp
        ldi temp, high(TIMER1_INTERVAL * (1000 / 64))
        out OCR1AH, temp
        ldi temp, low(TIMER1_INTERVAL * (1000 / 64))
        out OCR1AL, temp
        ldi temp, (1 << OCIE1A) ; Разрешение прерывания по сравнению с регистром A таймера 1
        out TIMSK, temp

        ldi temp, (1 << WGM21) | (1 << CS22) ; Установка режима CTC и делителя на 64 для таймера 2
        out TCCR2, temp
        ldi temp, TIMER2_INTERVAL * (1000 / 64)
        out OCR2, temp
        ldi temp, (1 << OCIE2) ; Разрешение прерывания по сравнению с регистром A таймера 2
        out TIMSK, temp

        ldi temp, (1 << RXEN) | (1 << TXEN) ; Включение передатчика и приемника USART
        out UCSRB, temp
        ldi temp, (1 << UCSZ1) | (1 << UCSZ0) ; Установка формата кадра: 8 бит данных, 1 стоп-бит
        out UCSRC, temp
        ldi temp, 51 ; Установка скорости передачи в 9600 bps при 16MHz
        out UBRRL, temp

        sei ; Разрешение глобальных прерываний

main_loop:
        rjmp main_loop

TIMER1_ISR:
        ldi temp, low(TIMER1_STR)
        call send_string
        reti

TIMER2_ISR:
        ldi temp, low(TIMER2_STR)
        call send_string
        reti

send_string:
        ldi ZH, high(RAMEND)
        ldi ZL, temp
loop:
        lpm temp, Z+
        tst temp
        brne loop
        cpi temp, 0x0D
        breq cr
        out UDR, temp
        rjmp loop

cr:
        ldi temp, 0x0A
        out UDR, temp
        ret

.org USART_RXC_vect
        reti
